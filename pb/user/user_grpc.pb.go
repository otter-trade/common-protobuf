// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.14.0
// source: proto/user/user.proto

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CommonUserClient is the client API for CommonUser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommonUserClient interface {
	//* 根据策略Id获取用户以及api key *
	GetUserApiKeyByStrategyId(ctx context.Context, in *GetUserApiKeyByStrategyIdReq, opts ...grpc.CallOption) (*GetUserApiKeyByStrategyIdResp, error)
}

type commonUserClient struct {
	cc grpc.ClientConnInterface
}

func NewCommonUserClient(cc grpc.ClientConnInterface) CommonUserClient {
	return &commonUserClient{cc}
}

func (c *commonUserClient) GetUserApiKeyByStrategyId(ctx context.Context, in *GetUserApiKeyByStrategyIdReq, opts ...grpc.CallOption) (*GetUserApiKeyByStrategyIdResp, error) {
	out := new(GetUserApiKeyByStrategyIdResp)
	err := c.cc.Invoke(ctx, "/pb.CommonUser/GetUserApiKeyByStrategyId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommonUserServer is the server API for CommonUser service.
// All implementations must embed UnimplementedCommonUserServer
// for forward compatibility
type CommonUserServer interface {
	//* 根据策略Id获取用户以及api key *
	GetUserApiKeyByStrategyId(context.Context, *GetUserApiKeyByStrategyIdReq) (*GetUserApiKeyByStrategyIdResp, error)
	mustEmbedUnimplementedCommonUserServer()
}

// UnimplementedCommonUserServer must be embedded to have forward compatible implementations.
type UnimplementedCommonUserServer struct {
}

func (UnimplementedCommonUserServer) GetUserApiKeyByStrategyId(context.Context, *GetUserApiKeyByStrategyIdReq) (*GetUserApiKeyByStrategyIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserApiKeyByStrategyId not implemented")
}
func (UnimplementedCommonUserServer) mustEmbedUnimplementedCommonUserServer() {}

// UnsafeCommonUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommonUserServer will
// result in compilation errors.
type UnsafeCommonUserServer interface {
	mustEmbedUnimplementedCommonUserServer()
}

func RegisterCommonUserServer(s grpc.ServiceRegistrar, srv CommonUserServer) {
	s.RegisterService(&CommonUser_ServiceDesc, srv)
}

func _CommonUser_GetUserApiKeyByStrategyId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserApiKeyByStrategyIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonUserServer).GetUserApiKeyByStrategyId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CommonUser/GetUserApiKeyByStrategyId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonUserServer).GetUserApiKeyByStrategyId(ctx, req.(*GetUserApiKeyByStrategyIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

// CommonUser_ServiceDesc is the grpc.ServiceDesc for CommonUser service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommonUser_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.CommonUser",
	HandlerType: (*CommonUserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserApiKeyByStrategyId",
			Handler:    _CommonUser_GetUserApiKeyByStrategyId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/user/user.proto",
}
